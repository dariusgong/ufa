<?xml version="1.0" encoding="UTF-8"?>
<beans 	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven validator="validator"/>
 
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>

    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <mvc:default-servlet-handler/> 
	
	<context:component-scan base-package="org.ufa.core.web.tag" />
	
    <!-- register "global" interceptor beans to apply to all registered HandlerMappings 
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>      
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
    </mvc:interceptors>-->
    
    <!-- Resolves localized messages*.properties and application.properties files in the application to allow for internationalization. 
        The messages*.properties files translate messages, the application.properties
        resource bundle localizes all application specific messages such as entity names and menu items. -->
    
    <!-- store preferred language configuration in a cookie -->
  <!--   <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" 
        p:cookieName="locale"/> -->
    
    <!-- 支持2个'/'之间为空白的URL -->
	<bean id="pathMatcher" class="org.springframework.util.AntPathMatcher" />
    
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="org.ufa.core.web.binder.DefaultBindingInitializer">
				<property name="validator" ref="validator" />
			</bean>
		</property>
		<!-- 支持@ResponseBody注解,直接从controller方法中返回各种类型的数据到HTTP Response中,例如String ,图片等 -->
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<constructor-arg value="UTF-8" />
					<property name="writeAcceptCharset" value="false" /><!-- See SPR-7316 -->
				</bean>
				<bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" />
				<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter" />
				<bean class="org.springframework.http.converter.FormHttpMessageConverter" />
			</list>
		</property>
	</bean>
	
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
    
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>

	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true" />
		<property name="mediaTypes">
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true" />
		<!-- 当PathExtension,request parameter,Accept header都无法确定content type时，使用此默认的content type.例如: "/user/1",在request里既没有format参数,有没有使用'.json'之类的扩展名,Accept 
			header也没指定content type -->
		<property name="defaultContentType" value="text/html" />
	</bean>
	
	<!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json /blog/1.xml -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<property name="viewResolvers">
			<list>
				<!-- contentType默认使用"text/html;charset=ISO-8859-1" -->
				<bean class="org.ufa.core.web.view.UfaDefaultViewResolver">
					<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<!-- for application/json -->
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<!-- prevent JSON Hijacking,在spring3.2版本中MappingJackson2JsonView.setPrefixJson方法有bug,没有对传入的boolean值做任何判断,即便设置为false,还是会加上前缀.所以要注释掉. -->
					<!-- <property name="prefixJson" value="false" /> -->
				</bean>
				<!-- for application/xml -->
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
							<property name="autodetectAnnotations" value="true" />
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	
    <!-- 
    根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json /blog/1.xml
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		设置为true以忽略对Accept Header的支持
		<property name="ignoreAcceptHeader" value="true" />
		在没有扩展名时即: "/user/1" 时的默认展现形式
		<property name="defaultContentType" value="text/html" />

		扩展名至mimeType的映射,即 /user.json => application/json
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		用于开启 /userinfo/123?format=json 的支持
		<property name="favorParameter" value="false" />
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.js.ajax.AjaxUrlBasedViewResolver">
					<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
				</bean>
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/> 
					<property name="prefix" value="/pages"/> <property name="suffix" value=".jsp"></property> </bean> <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver"> 
					<property name="basename" value="views" /> </bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				for application/json
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
					prevent JSON Hijacking
					<property name="prefixJson" value="false" />
				</bean>
				for application/xml
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
							<property name="autodetectAnnotations" value="true" />
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean> -->
    
    <!-- Tiles Configuration -->
    <bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer" id="tilesConfigurer">
    	<property name="checkRefresh" value="true" />
        <property name="definitions">
            <list>
                <value>/WEB-INF/layouts/**/*.xml</value>
            </list>
        </property>
        <property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" />
    </bean>
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>        

    <!-- Enable file upload functionality -->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
    	<property name="maxUploadSize" value="100000000" />
		<property name="maxInMemorySize" value="10240" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
    
  	<!-- 国际化资源文件-->
	<bean id="messageSource" class="org.ufa.core.config.UfaResourceBundleMessageSource">
		<!-- 注意:jar中的资源必须有root directory -->
		<property name="locationPatterns">
			<array>
				<!-- 如下格式是模块自身专用的,不能用在使用的项目中 -->
				<value>classpath*:i18n/MessageResources*.properties</value>
				<!-- web项目可以使用如下格式 -->
				<value>classpath*:MessageResources*.properties</value>
				<!-- 被打包成jar的项目,必须使用如下格式,具体原因见 java.lang.Class.getResource(String name)方法说明-->
				<value>classpath*:META-INF/i18n_*.properties</value>
			</array>
		</property>
		<!-- 如果在资源文件中没找到指定的code,则抛异常,便于开发时纠错 -->
		<property name="useCodeAsDefaultMessage" value="false" />
	</bean>
     
</beans>
